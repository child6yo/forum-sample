// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	forum_sample "github.com/child6yo/forum-sample"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
	isgomock struct{}
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user forum_sample.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockPosts is a mock of Posts interface.
type MockPosts struct {
	ctrl     *gomock.Controller
	recorder *MockPostsMockRecorder
	isgomock struct{}
}

// MockPostsMockRecorder is the mock recorder for MockPosts.
type MockPostsMockRecorder struct {
	mock *MockPosts
}

// NewMockPosts creates a new mock instance.
func NewMockPosts(ctrl *gomock.Controller) *MockPosts {
	mock := &MockPosts{ctrl: ctrl}
	mock.recorder = &MockPostsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPosts) EXPECT() *MockPostsMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPosts) CreatePost(post forum_sample.Posts) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", post)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostsMockRecorder) CreatePost(post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPosts)(nil).CreatePost), post)
}

// DeletePost mocks base method.
func (m *MockPosts) DeletePost(userId, postId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", userId, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostsMockRecorder) DeletePost(userId, postId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPosts)(nil).DeletePost), userId, postId)
}

// GetAllPosts mocks base method.
func (m *MockPosts) GetAllPosts() ([]forum_sample.PostsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts")
	ret0, _ := ret[0].([]forum_sample.PostsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostsMockRecorder) GetAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPosts)(nil).GetAllPosts))
}

// GetPostById mocks base method.
func (m *MockPosts) GetPostById(id int) (forum_sample.Posts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", id)
	ret0, _ := ret[0].(forum_sample.Posts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockPostsMockRecorder) GetPostById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockPosts)(nil).GetPostById), id)
}

// UpdatePost mocks base method.
func (m *MockPosts) UpdatePost(userId, postId int, input forum_sample.UpdatePostInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", userId, postId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostsMockRecorder) UpdatePost(userId, postId, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPosts)(nil).UpdatePost), userId, postId, input)
}

// MockThreads is a mock of Threads interface.
type MockThreads struct {
	ctrl     *gomock.Controller
	recorder *MockThreadsMockRecorder
	isgomock struct{}
}

// MockThreadsMockRecorder is the mock recorder for MockThreads.
type MockThreadsMockRecorder struct {
	mock *MockThreads
}

// NewMockThreads creates a new mock instance.
func NewMockThreads(ctrl *gomock.Controller) *MockThreads {
	mock := &MockThreads{ctrl: ctrl}
	mock.recorder = &MockThreadsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThreads) EXPECT() *MockThreadsMockRecorder {
	return m.recorder
}

// CreateThread mocks base method.
func (m *MockThreads) CreateThread(postId int, thread forum_sample.Threads) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThread", postId, thread)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThread indicates an expected call of CreateThread.
func (mr *MockThreadsMockRecorder) CreateThread(postId, thread any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThread", reflect.TypeOf((*MockThreads)(nil).CreateThread), postId, thread)
}

// DeleteThread mocks base method.
func (m *MockThreads) DeleteThread() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteThread")
}

// DeleteThread indicates an expected call of DeleteThread.
func (mr *MockThreadsMockRecorder) DeleteThread() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThread", reflect.TypeOf((*MockThreads)(nil).DeleteThread))
}

// GetThreadById mocks base method.
func (m *MockThreads) GetThreadById(threadId int) (forum_sample.Threads, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreadById", threadId)
	ret0, _ := ret[0].(forum_sample.Threads)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreadById indicates an expected call of GetThreadById.
func (mr *MockThreadsMockRecorder) GetThreadById(threadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreadById", reflect.TypeOf((*MockThreads)(nil).GetThreadById), threadId)
}

// GetThreadsByPost mocks base method.
func (m *MockThreads) GetThreadsByPost(postId int) ([]*forum_sample.ThreadsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreadsByPost", postId)
	ret0, _ := ret[0].([]*forum_sample.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreadsByPost indicates an expected call of GetThreadsByPost.
func (mr *MockThreadsMockRecorder) GetThreadsByPost(postId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreadsByPost", reflect.TypeOf((*MockThreads)(nil).GetThreadsByPost), postId)
}

// UpdateThread mocks base method.
func (m *MockThreads) UpdateThread(userId, threadId int, input forum_sample.UpdateThreadInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThread", userId, threadId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateThread indicates an expected call of UpdateThread.
func (mr *MockThreadsMockRecorder) UpdateThread(userId, threadId, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThread", reflect.TypeOf((*MockThreads)(nil).UpdateThread), userId, threadId, input)
}
